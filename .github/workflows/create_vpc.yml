name: Create VPC

on:
  workflow_dispatch: # Enable manual triggering
    inputs:
      target-env:
        required: true
        type: string
      vpc-cidr:
        description: 'CIDR block for the VPC'
        required: true
        default: '10.0.0.0/16'
      public-subnet-cidr:
        description: 'CIDR block for the public subnet'
        required: true
        default: '["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]'
      private-subnet-cidr:
        description: 'CIDR block for the private subnet'
        required: true
        default: '["10.0.10.0/24", "10.0.11.0/24", "10.0.12.0/24"]'

  workflow_call:
    inputs:
      target-env:
        required: true
        type: string
      vpc-cidr:
        description: 'CIDR block for the VPC'
        type: string
        required: true
        default: '10.0.0.0/16'
      public-subnet-cidr:
        description: 'CIDR block for the public subnet'
        type: string
        required: true
        default: '10.0.1.0/24'
      private-subnet-cidr:
        description: 'CIDR block for the private subnet'
        type: string
        required: true
        default: '10.0.2.0/24'

    secrets:
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  deploy:
    name: Create a VPC for ${{ inputs.target-env }}
    permissions:
      contents: none
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.target-env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Validate Inputs
        id: validate_inputs
        run: |
          # Get input values
          vpc_cidr="${{ inputs.vpc-cidr }}"

          # Validate CIDR formats
          if ! echo "$vpc_cidr" | grep -E '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$' &> /dev/null; then
            echo "::error::Invalid VPC CIDR format. Please provide a valid CIDR block (e.g., 10.0.0.0/16)"
            exit 1
          fi

          # Convert JSON strings to arrays
          echo "public_subnets_cidr_arr=($(echo '${{ inputs.public-subnet-cidr }}' |  jq -r '.[]'))" >> "$GITHUB_OUTPUT"
          echo "private_subnets_cidr_arr=($(echo '${{ inputs.private-subnet-cidr }}' |  jq -r '.[]'))" >> "$GITHUB_OUTPUT"

          # Convert public and private subnets CIDR lists to Terraform list format
          echo "public_subnets_cidr=$(echo "${public_subnets_cidr_arr[@]}" | tr -d '\n' | sed 's/ /", "/g')" >> "$GITHUB_OUTPUT"
          echo "private_subnets_cidr=$(echo "${private_subnets_cidr_arr[@]}" | tr -d '\n' | sed 's/ /", "/g')" >> "$GITHUB_OUTPUT"

        shell: bash

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.0  # Specify the Terraform version to use

      - name: Initialize Terraform
        run: terraform init -backend-config=hcl/backend_${{ inputs.target-env }}.hcl
        working-directory: vpc
        
      - name: Validate Terraform configuration
        run: terraform validate -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars \
          -var="vpc_cidr=${{ inputs.vpc-cidr }}" \
          -var="public_subnets_cidr=[\"${{ steps.validate_inputs.outputs.public_subnets_cidr }}\"]" \
          -var="private_subnets_cidr=[\"${{ steps.validate_inputs.outputs.private_subnets_cidr }}\"]"
        working-directory: vpc
        
      - name: Plan Terraform changes
        run: terraform plan -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars \
          -var="vpc_cidr=${{ inputs.vpc-cidr }}" \
          -var="public_subnets_cidr=[\"${{ steps.validate_inputs.outputs.public_subnets_cidr }}\"]" \
          -var="private_subnets_cidr=[\"${{ steps.validate_inputs.outputs.private_subnets_cidr }}\"]"
        working-directory: vpc
        
      - name: Apply Terraform changes
        run: terraform apply -auto-approve -var-file=tfvars/${{ inputs.target-env }}.auto.tfvars \
          -var="vpc_cidr=${{ inputs.vpc-cidr }}" \
          -var="public_subnets_cidr=[\"${{ steps.validate_inputs.outputs.public_subnets_cidr }}\"]" \
          -var="private_subnets_cidr=[\"${{ steps.validate_inputs.outputs.private_subnets_cidr }}\"]"
        working-directory: vpc